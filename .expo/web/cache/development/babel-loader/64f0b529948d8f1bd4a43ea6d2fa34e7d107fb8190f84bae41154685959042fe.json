{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { CheckBox, Input, Text, Button } from \"@rneui/themed\";\nimport * as Font from \"expo-font\";\nimport * as React from \"react\";\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport { useEffect, useState } from \"react\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { StackActions } from \"@react-navigation/native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    paddingTop: 0,\n    paddingBottom: 50,\n    paddingHorizontal: 20\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: \"#DDDDDD\",\n    margin: 5\n  },\n  addTaskContainer: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderTopWidth: 1,\n    borderTopColor: \"#ccc\",\n    backgroundColor: \"#f9f9f9\"\n  }\n});\nfunction cacheFonts(_x) {\n  return _cacheFonts.apply(this, arguments);\n}\nfunction _cacheFonts() {\n  _cacheFonts = _asyncToGenerator(function* (fonts) {\n    return fonts.map(function () {\n      var _ref7 = _asyncToGenerator(function* (font) {\n        return yield Font.loadAsync(font);\n      });\n      return function (_x3) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n  });\n  return _cacheFonts.apply(this, arguments);\n}\nvar initTasks = [{\n  description: \"Task1\",\n  completed: true,\n  key: 1,\n  relatedTasks: [2]\n}, {\n  description: \"Task2\",\n  completed: true,\n  key: 2\n}];\nvar Stack = createNativeStackNavigator();\nvar TodoHomeScreen = function TodoHomeScreen() {\n  var _useState = useState(initTasks),\n    _useState2 = _slicedToArray(_useState, 2),\n    tasks = _useState2[0],\n    setTasks = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showCompleted = _useState4[0],\n    setShowCompleted = _useState4[1];\n  useEffect(function () {\n    function getValue() {\n      return _getValue.apply(this, arguments);\n    }\n    function _getValue() {\n      _getValue = _asyncToGenerator(function* () {\n        var value = yield AsyncStorage.getItem(\"@tasks\");\n        if (value === null) {\n          console.log(\"Storing serialized version of our tasks\" + JSON.stringify(tasks));\n        } else {\n          var parsedValue = JSON.parse(value);\n          console.log(parsedValue);\n          setTasks(JSON.parse(value));\n        }\n      });\n      return _getValue.apply(this, arguments);\n    }\n    getValue();\n  }, []);\n  return _jsxs(Stack.Navigator, {\n    initialRouteName: \"Todo List\",\n    children: [_jsx(Stack.Screen, {\n      name: \"Todo List\",\n      children: function children(props) {\n        return _jsx(TodoScreen, _objectSpread(_objectSpread({}, props), {}, {\n          tasks: tasks,\n          setTasks: setTasks,\n          showCompleted: showCompleted,\n          setShowCompleted: setShowCompleted\n        }));\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"Details\",\n      children: function children(props) {\n        return _jsx(DetailsScreen, _objectSpread(_objectSpread({}, props), {}, {\n          tasks: tasks,\n          setTasks: setTasks\n        }));\n      }\n    })]\n  });\n};\nfunction DetailsScreen(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route,\n    setTasks = _ref.setTasks,\n    tasks = _ref.tasks;\n  var _route$params$item = route.params.item,\n    description = _route$params$item.description,\n    completed = _route$params$item.completed,\n    key = _route$params$item.key,\n    relatedTasks = _route$params$item.relatedTasks;\n  useEffect(function () {\n    navigation.setOptions({\n      title: description === \"\" ? \"No title\" : description\n    });\n  }, [navigation]);\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    children: [_jsx(Text, {\n      children: \"Details Screen\"\n    }), _jsx(Text, {\n      children: description\n    }), relatedTasks !== undefined && relatedTasks.length > 0 ? _jsxs(_Fragment, {\n      children: [_jsx(Text, {\n        children: \"Related Tasks:\"\n      }), tasks.filter(function (task) {\n        return relatedTasks.includes(task.key);\n      }).map(function (cTask) {\n        return _jsx(Button, {\n          title: cTask.description,\n          onPress: function onPress() {\n            navigation.dispatch(StackActions.push(\"Details\", {\n              item: cTask\n            }));\n          }\n        }, cTask.key);\n      })]\n    }) : undefined]\n  });\n}\nfunction TodoScreen(_ref2) {\n  var navigation = _ref2.navigation,\n    tasks = _ref2.tasks,\n    setTasks = _ref2.setTasks,\n    showCompleted = _ref2.showCompleted,\n    setShowCompleted = _ref2.setShowCompleted;\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    fontsLoaded = _useState6[0],\n    setFontsLoaded = _useState6[1];\n  var _useState7 = useState(\"\"),\n    _useState8 = _slicedToArray(_useState7, 2),\n    input = _useState8[0],\n    setInput = _useState8[1];\n  useEffect(function () {\n    function loadFonts() {\n      return _loadFonts.apply(this, arguments);\n    }\n    function _loadFonts() {\n      _loadFonts = _asyncToGenerator(function* () {\n        yield cacheFonts([FontAwesome.font]);\n        setFontsLoaded(true);\n      });\n      return _loadFonts.apply(this, arguments);\n    }\n    loadFonts();\n  }, []);\n  var updateTask = function () {\n    var _ref3 = _asyncToGenerator(function* (task) {\n      console.log(task);\n      task.completed = !task.completed;\n      setTasks(_toConsumableArray(tasks));\n      yield AsyncStorage.setItem(\"@tasks\", JSON.stringify(tasks));\n    });\n    return function updateTask(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var addTask = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      var maxKey = 0;\n      tasks.forEach(function (task) {\n        if (task.key > maxKey) {\n          maxKey = task.key;\n        }\n      });\n      var newTasks = [].concat(_toConsumableArray(tasks), [{\n        description: input,\n        completed: false,\n        key: maxKey + 1\n      }]);\n      setTasks(newTasks);\n      console.log(newTasks);\n      yield AsyncStorage.setItem(\"@tasks\", JSON.stringify(newTasks));\n      setInput(\"\");\n    });\n    return function addTask() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  function toggleShowCompleted() {\n    setShowCompleted(!showCompleted);\n  }\n  function renderItem(_ref5) {\n    var item = _ref5.item;\n    var deleteTask = function () {\n      var _ref6 = _asyncToGenerator(function* () {\n        var updatedTasks = tasks.filter(function (task) {\n          return task.key !== item.key;\n        });\n        setTasks(updatedTasks);\n        yield AsyncStorage.setItem(\"@tasks\", JSON.stringify(updatedTasks));\n      });\n      return function deleteTask() {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n    if (!showCompleted && item.completed) {\n      return null;\n    }\n    return _jsxs(View, {\n      style: {\n        flex: 1,\n        flexDirection: \"row\",\n        margin: 10\n      },\n      children: [_jsx(CheckBox, {\n        textStyle: item.completed ? {\n          textDecorationLine: \"line-through\",\n          textDecorationStyle: \"solid\"\n        } : undefined,\n        title: item.description,\n        checked: item.completed,\n        onPress: function onPress() {\n          return updateTask(item);\n        }\n      }), _jsx(Button, {\n        style: styles.button,\n        title: \"Details\",\n        onPress: function onPress() {\n          return navigation.navigate(\"Details\", {\n            item: item\n          });\n        }\n      }), _jsx(Button, {\n        style: styles.button,\n        title: \"Delete\",\n        onPress: deleteTask\n      })]\n    });\n  }\n  return fontsLoaded ? _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(StatusBar, {\n      style: \"auto\"\n    }), _jsx(Button, {\n      onPress: function onPress() {\n        return toggleShowCompleted();\n      },\n      children: _jsx(Text, {\n        children: showCompleted ? \"Hide Completed\" : \"Show Completed\"\n      })\n    }), _jsx(FlatList, {\n      style: {\n        width: \"100%\"\n      },\n      data: tasks,\n      renderItem: renderItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.key.toString();\n      }\n    }), _jsxs(View, {\n      style: styles.addTaskContainer,\n      children: [_jsx(Input, {\n        onChangeText: setInput,\n        value: input,\n        placeholder: \"New Task...\"\n      }), _jsx(Button, {\n        title: \"Add Task\",\n        onPress: addTask\n      })]\n    })]\n  }) : _jsx(View, {\n    style: styles.container,\n    children: _jsx(Text, {\n      children: \"Loading...\"\n    })\n  });\n}\nexport default TodoHomeScreen;","map":{"version":3,"names":["StatusBar","StyleSheet","View","FlatList","CheckBox","Input","Text","Button","Font","React","FontAwesome","useEffect","useState","createNativeStackNavigator","StackActions","AsyncStorage","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","styles","create","container","flex","backgroundColor","paddingTop","paddingBottom","paddingHorizontal","button","alignItems","margin","addTaskContainer","flexDirection","position","bottom","left","right","paddingVertical","borderTopWidth","borderTopColor","cacheFonts","_x","_cacheFonts","apply","arguments","_asyncToGenerator","fonts","map","_ref7","font","loadAsync","_x3","initTasks","description","completed","key","relatedTasks","Stack","TodoHomeScreen","_useState","_useState2","_slicedToArray","tasks","setTasks","_useState3","_useState4","showCompleted","setShowCompleted","getValue","_getValue","value","getItem","console","log","JSON","stringify","parsedValue","parse","Navigator","initialRouteName","children","Screen","name","props","TodoScreen","_objectSpread","DetailsScreen","_ref","navigation","route","_route$params$item","params","item","setOptions","title","style","justifyContent","undefined","length","filter","task","includes","cTask","onPress","dispatch","push","_ref2","_useState5","_useState6","fontsLoaded","setFontsLoaded","_useState7","_useState8","input","setInput","loadFonts","_loadFonts","updateTask","_ref3","_toConsumableArray","setItem","_x2","addTask","_ref4","maxKey","forEach","newTasks","concat","toggleShowCompleted","renderItem","_ref5","deleteTask","_ref6","updatedTasks","textStyle","textDecorationLine","textDecorationStyle","checked","navigate","width","data","keyExtractor","toString","onChangeText","placeholder"],"sources":["/Users/lillyallgood/Todo-App-1/TodoHomeScreen.js"],"sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, View } from \"react-native\";\nimport { FlatList } from \"react-native\";\nimport { CheckBox, Input, Text, Button } from \"@rneui/themed\";\nimport * as Font from \"expo-font\";\nimport * as React from \"react\";\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport { useEffect, useState } from \"react\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { StackActions } from \"@react-navigation/native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    paddingTop: 0,\n    paddingBottom: 50,\n    paddingHorizontal: 20,\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: \"#DDDDDD\",\n    margin: 5,\n  },\n  addTaskContainer: {\n    flexDirection: \"column\", \n    alignItems: \"center\",\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderTopWidth: 1,\n    borderTopColor: \"#ccc\",\n    backgroundColor: \"#f9f9f9\",\n  },\n});\n\nasync function cacheFonts(fonts) {\n  return fonts.map(async (font) => await Font.loadAsync(font));\n}\n\nlet initTasks = [\n  { description: \"Task1\", completed: true, key: 1, relatedTasks: [2] },\n  { description: \"Task2\", completed: true, key: 2 },\n];\n\nconst Stack = createNativeStackNavigator();\n\nconst TodoHomeScreen = () => {\n  let [tasks, setTasks] = useState(initTasks);\n  let [showCompleted, setShowCompleted] = useState(true);\n  useEffect(() => {\n    async function getValue() {\n      const value = await AsyncStorage.getItem(\"@tasks\");\n      if (value === null) {\n        console.log(\n          \"Storing serialized version of our tasks\" + JSON.stringify(tasks)\n        );\n      } else {\n        let parsedValue = JSON.parse(value);\n        console.log(parsedValue);\n        setTasks(JSON.parse(value));\n      }\n    }\n    getValue();\n  }, []);\n\n  return (\n    <Stack.Navigator initialRouteName=\"Todo List\">\n      <Stack.Screen name=\"Todo List\">\n        {(props) => (\n          <TodoScreen\n            {...props}\n            tasks={tasks}\n            setTasks={setTasks}\n            showCompleted={showCompleted}\n            setShowCompleted={setShowCompleted}\n          />\n        )}\n      </Stack.Screen>\n      <Stack.Screen name=\"Details\">\n        {(props) => (\n          <DetailsScreen {...props} tasks={tasks} setTasks={setTasks} />\n        )}\n      </Stack.Screen>\n    </Stack.Navigator>\n  );\n};\n\nfunction DetailsScreen({ navigation, route, setTasks, tasks }) {\n  let { description, completed, key, relatedTasks } = route.params.item;\n  useEffect(() => {\n    navigation.setOptions({\n      title: description === \"\" ? \"No title\" : description,\n    });\n  }, [navigation]);\n\n  return (\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n      <Text>Details Screen</Text>\n      <Text>{description}</Text>\n      {relatedTasks !== undefined && relatedTasks.length > 0 ? (\n        <>\n          <Text>Related Tasks:</Text>\n          {tasks\n            .filter((task) => relatedTasks.includes(task.key))\n            .map((cTask) => (\n              <Button\n                key={cTask.key}\n                title={cTask.description}\n                onPress={() => {\n                  navigation.dispatch(\n                    StackActions.push(\"Details\", { item: cTask })\n                  );\n                }}\n              />\n            ))}\n        </>\n      ) : undefined}\n    </View>\n  );\n}\n\nfunction TodoScreen({\n  navigation,\n  tasks,\n  setTasks,\n  showCompleted,\n  setShowCompleted,\n}) {\n\n  const [fontsLoaded, setFontsLoaded] = useState(false);\n  let [input, setInput] = useState(\"\");\n  useEffect(() => {\n    async function loadFonts() {\n      await cacheFonts([FontAwesome.font]);\n      setFontsLoaded(true);\n    }\n    loadFonts();\n  }, []);\n\n  let updateTask = async (task) => {\n    console.log(task);\n    task.completed = !task.completed;\n    setTasks([...tasks]);\n    await AsyncStorage.setItem(\"@tasks\", JSON.stringify(tasks));\n  };\n\n  let addTask = async () => {\n    let maxKey = 0;\n    tasks.forEach((task) => {\n      if (task.key > maxKey) {\n        maxKey = task.key;\n      }\n    });\n    let newTasks = [\n      ...tasks,\n      {\n        description: input,\n        completed: false,\n        key: maxKey + 1,\n      },\n    ];\n    setTasks(newTasks);\n    console.log(newTasks);\n    await AsyncStorage.setItem(\"@tasks\", JSON.stringify(newTasks));\n    setInput(\"\");\n  };\n\n  function toggleShowCompleted() {\n    setShowCompleted(!showCompleted);\n  }\n\n  function renderItem({ item }) {\n    const deleteTask = async () => {\n      const updatedTasks = tasks.filter((task) => task.key !== item.key);\n      setTasks(updatedTasks);\n      await AsyncStorage.setItem(\"@tasks\", JSON.stringify(updatedTasks));\n    };\n\n    if (!showCompleted && item.completed) {\n      return null;\n    }\n    return (\n      <View style={{ flex: 1, flexDirection: \"row\", margin: 10 }}>\n        <CheckBox\n          textStyle={\n            item.completed\n              ? {\n                  textDecorationLine: \"line-through\",\n                  textDecorationStyle: \"solid\",\n                }\n              : undefined\n          }\n          title={item.description}\n          checked={item.completed}\n          onPress={() => updateTask(item)}\n        />\n        <Button\n          style={styles.button}\n          title=\"Details\"\n          onPress={() => navigation.navigate(\"Details\", { item })}\n        />\n        <Button style={styles.button} title=\"Delete\" onPress={deleteTask} />\n      </View>\n    );\n  }\n\n  return fontsLoaded ? (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <Button onPress={() => toggleShowCompleted()}>\n        <Text>{showCompleted ? \"Hide Completed\" : \"Show Completed\"}</Text>\n      </Button>\n      <FlatList\n        style={{ width: \"100%\" }}\n        data={tasks}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.key.toString()}\n      />\n      <View style={styles.addTaskContainer}>\n        <Input\n          onChangeText={setInput}\n          value={input}\n          placeholder=\"New Task...\"\n        ></Input>\n        <Button title=\"Add Task\" onPress={addTask} />\n      </View>\n    </View>\n  ) : (\n    <View style={styles.container}>\n      <Text>Loading...</Text>\n    </View>\n  );\n}\n\nexport default TodoHomeScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}